<?xml version = "1.0" encoding = "UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bestmovies.sep6_project.dao.interfaces.IMovieMapper">

    <resultMap id="result" type="Movie">
        <result property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="year" column="year"/>
    </resultMap>

    <select id="getAll" resultMap="result">
        SELECT *
        FROM movies;
    </select>
    <select id="getMoviesByTitle" resultMap="result">
        SELECT *
        FROM movies
        WHERE title LIKE CONCAT('%', #{title}, '%') LIMIT 10;
    </select>
    <select id="getMovieById" resultMap="result" parameterType="long">
        SELECT *
        FROM movies
        WHERE id = #{id};
    </select>
    <select id="getAllMoviesForDirector" resultMap="result">
        SELECT m.id, m.title, m.`year`
        FROM movies m
                 JOIN directors d ON m.id = d.movie_id
        WHERE d.person_id = #{id} limit 5;
    </select>

    <select id="getAllMoviesForStar" resultMap="result">
        SELECT m.id, m.title, m.`year`
        FROM movies m
                 JOIN stars s ON m.id = s.movie_id
        WHERE s.person_id = #{id}
    </select>

    <select id="getTopFiveMoviesForPerson" resultMap="result">
        SELECT m.id, m.title, m.`year`
        FROM(
            SELECT DISTINCT m.id, m.title, m.`year`, r.rating
            FROM movies m
                     JOIN ratings r ON m.id = r.movie_id
                     JOIN directors d ON m.id = d.movie_id
                     JOIN stars s ON m.id = s.movie_id
            WHERE s.person_id = #{id} OR d.person_id = #{id}
            ORDER BY r.rating DESC
            LIMIT 5) m
    </select>

    <select id="getNMoviesByRating" resultMap="result">
        SELECT m.id as id, m.title, m.`year`
        FROM movies m
                 JOIN ratings r on m.id = r.movie_id
        WHERE r.rating >= #{rating} limit #{n};
    </select>

    <select id="getNMoviesByVotes" resultMap="result">
        SELECT m.id as id, m.title, m.`year`
        FROM movies m
                 JOIN ratings r on m.id = r.movie_id
        WHERE r.votes >= #{votes} limit #{n};
    </select>

    <select id="getNMoviesByYear" resultMap="result">
        SELECT *
        FROM movies
        WHERE `year` = #{year} limit #{n};
    </select>

    <select id="getMoviesByYear" resultMap="result">
        SELECT *
        FROM movies
        WHERE `year` = #{year};
    </select>
    <select id="getNMostPopularMovies" resultMap="result">
        SELECT m.id, m.title, m.`year`
        FROM movies m
                 JOIN ratings r ON m.id = r.movie_id
        ORDER BY r.votes DESC, m.id ASC
            LIMIT #{n};
    </select>
    <select id="getNBestRatedMovies" resultMap="result">
        SELECT m.id, m.title, m.`year`
        FROM movies m
                 JOIN ratings r ON m.id = r.movie_id
        ORDER BY r.rating DESC, m.id ASC
            LIMIT #{n};
    </select>
    <select id="getNMoviesByPage" resultMap="result">
        SELECT *
        FROM movies
        WHERE `year` &lt; 2024
        ORDER BY `year` DESC
            LIMIT ${(pageNum - 1) * limit}, #{limit}
    </select>

    <select id="getNMostPopularMoviesByYear" resultMap="result">
        SELECT m.id, m.title, m.`year`
        FROM movies m
                 JOIN ratings r ON m.id = r.movie_id
        WHERE m.`year` = #{year}
        ORDER BY r.votes DESC, m.id ASC
            LIMIT #{n};
    </select>

    <insert id="createMovie" parameterType="Movie" useGeneratedKeys='true' keyProperty='id'>
        INSERT INTO movies (title, `year`)
        VALUES (#{title}, #{year});
    </insert>

    <update id="updateMovie" parameterType="Movie">
        UPDATE movies
        SET title  = #{title},
            `year` = #{year}
        WHERE id = #{id};
    </update>

    <delete id="deleteMovie" parameterType="long">
        DELETE
        FROM movies
        WHERE id = #{id}
    </delete>


</mapper>